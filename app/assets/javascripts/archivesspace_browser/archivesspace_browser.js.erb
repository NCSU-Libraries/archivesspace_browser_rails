// rootPath() is only part that will be affected by ERB template processing
// Sets the root path for backend requests based on Rails configuration
function rootPath() {
  return '<%= Rails.application.config.action_controller.relative_url_root %>';
}


// Begin ArchivesspaceBrowser object definition
function ArchivesspaceBrowser(options) {
  this.options = options || {};
  console.log("hello from ArchivesSpace Browser")
  this.apiRootPath = rootPath() + '/archivesspace_browser'
  this.rootSelector = '#archivesspace-browser';
  this.rootElement = document.querySelector(this.rootSelector);
  this.callback = this.options.callback;
  if (!this.rootElement) {
    throw "No element exists matching " + this.rootSelector;
  }
  else {
    this.generate();
  }
}


/* Utility functions */

ArchivesspaceBrowser.prototype.getUrl = function(url, callback) {
  var request = new XMLHttpRequest();

  request.onreadystatechange = function() {
    if (request.readyState == 4 && request.status == 200) {
      callback(request.responseText);
    }
  }

  request.open('GET', url, true );
  var token = document.querySelector('meta[name="csrf-token"]').content;
  request.setRequestHeader('X-CSRF-Token', token);
  request.setRequestHeader('Content-Type', 'application/json');
  request.send();
}

ArchivesspaceBrowser.prototype.getUrlWithParams = function(url, params, callback) {
  if (params) {
    qStrings = [];
    for (var key in params) {
      qStrings.push(key + '=' + encodeURIComponent(params[key]))
    }
    if (qStrings.length > 0) {
      url = url + '?' + qStrings.join('&');
    }
  }
  this.getUrl(url, callback);
}

ArchivesspaceBrowser.prototype.htmlToElement = function(html) {
  var template = document.createElement('template');
  html = html.trim(); // Never return a text node of whitespace as the result
  template.innerHTML = html;
  return template.content.firstChild;
}

ArchivesspaceBrowser.prototype.generateElement = function(name, classes) {
  var el = document.createElement(name);
  if (typeof classes == 'string') {
    classes = [ classes ];
  }
  if (classes) {
    classes.forEach(function(c) { el.classList.add(c) });
  }
  return el;
}

ArchivesspaceBrowser.prototype.generateBackLink = function(text, href) {
  var link = this.generateElement('span', ['link','back-link']);
  var textNode = document.createTextNode(text);
  var i = this.generateElement('i', ['fas','fa-hand-point-left']);
  link.appendChild(i);
  link.appendChild(textNode);
  if (href) {
    link.setAttribute('href', href);
  }
  return link;
}

ArchivesspaceBrowser.prototype.setElementAttributes = function(el, attributes) {
  for (var attr in attributes) {
    el.setAttribute(attr,attributes[attr]);
  }
  return el;
}

ArchivesspaceBrowser.prototype.appendChildren = function(el, children) {
  children.forEach(function(child) {
    el.appendChild(child);
  })
  return el;
}

ArchivesspaceBrowser.prototype.hidden = function(el) {
  return el.classList.contains('hidden');
}

ArchivesspaceBrowser.prototype.show = function(el) {
  el.classList.remove('hidden');
}

ArchivesspaceBrowser.prototype.hide = function(el) {
  if (!this.hidden(el)) {
    el.classList.add('hidden');
  }
}

/* END Utility functions */


ArchivesspaceBrowser.prototype.generate = function() {
  this.generateHeading();
  this.generateResourceTreeComponent();
  this.generateResourceSearchComponent();
  this.generateSelectByUriComponent();
}


ArchivesspaceBrowser.prototype.generateHeading = function() {
  var heading = this.generateElement('div');
  heading.setAttribute('id', 'archivesspace-browser-heading');
  heading.innerHTML = "Select record from ArchivesSpace";
  this.rootElement.appendChild(heading);
}


ArchivesspaceBrowser.prototype.generateResourceSearchComponent = function() {
  var _this = this;
  var element = this.generateElement('div');
  element.setAttribute('id', 'resource-search');

  var label = this.generateElement('label', 'block');
  label.setAttribute('for','resource-search-input');
  label.innerHTML = 'Search resources by title, then select from results';

  var input = this.generateElement('input');
  this.setElementAttributes(input, { type: 'text', id: 'resource-search-input', placeholder: 'Begin typing to see matching titles' });

  var results = this.generateElement('div', 'hidden');
  results.setAttribute('id', 'resource-search-results');

  var loading = this.generateElement('div', ['loading', 'hidden']);
  var loadingMessage = this.generateElement('div', ['message']);
  loadingMessage.innerHTML = 'LOADING';
  loading.appendChild(loadingMessage);
  results.appendChild(loading);

  this.appendChildren(element, [ label, input, results ]);
  this.resourceSearchLoading = loading;
  this.resourceSearchResults = results;
  this.resourceSearchInput = input;
  this.resourceSearch = element;

  this.resourceSearchInput.addEventListener('input', function(e) {
    _this.performResourceSearch(this.value);
  });

  this.rootElement.appendChild(this.resourceSearch);
}


ArchivesspaceBrowser.prototype.generateSelectByUriComponent = function() {
  var _this = this;
  var element = this.generateElement('div');
  element.setAttribute('id', 'select-by-uri');

  var label = this.generateElement('label', 'block');
  label.setAttribute('for','select-by-uri-input');
  label.innerHTML = 'Alternately, paste ArchivesSpace record URI and click "Select"';

  var input = this.generateElement('input', 'input-group-field');
  this.setElementAttributes(input, { type: 'text', id: 'select-by-uri-input', placeholder: 'Enter ArchivesSpace URI' });

  var button = this.generateElement('button', 'button');
  button.setAttribute('id', 'select-by-uri-submit');
  button.innerHTML = "Select"

  button.addEventListener('click', function(event) {
    event.preventDefault();
    var uri = input.value;
    _this.getArchivalObjectRecord(uri);
  });

  var inputGroup = this.htmlToElement('<div class="input-group"></div>');
  var inputGroupButtonWrapper = this.htmlToElement('<div class="input-group-button"></div>');
  inputGroupButtonWrapper.appendChild(button);
  this.appendChildren(inputGroup, [ input, inputGroupButtonWrapper ]);
  this.appendChildren(element, [ label, inputGroup]);
  this.selectByUri = element;
  this.rootElement.appendChild(this.selectByUri);
}


ArchivesspaceBrowser.prototype.generateResourceTreeComponent = function() {
  var _this = this;
  var element = this.generateElement('div', 'hidden');
  element.setAttribute('id', 'resource-tree');

  var label = this.generateElement('label', 'block');
  label.setAttribute('for','resource-tree');
  label.innerHTML = 'Browse resource contents to find desired record, the click "Select"';

  var backToSearchWrap = this.generateElement('div');
  backToSearchWrap.setAttribute('id','back-to-search');
  backToSearch = this.generateBackLink("Back to search");

  backToSearch.addEventListener('click', function(e) {
    _this.clearResourceTreeContent();
    _this.hide(_this.resourceTree);
    _this.show(_this.resourceSearch);
  });

  backToSearchWrap.appendChild(backToSearch);

  var content = this.generateElement('div', 'resource-tree-content');
  var loading = this.generateElement('div', ['loading', 'hidden']);
  var loadingMessage = this.generateElement('div', ['message']);
  loadingMessage.innerHTML = 'LOADING';
  loading.appendChild(loadingMessage);
  // content.appendChild(loading);

  this.appendChildren(element, [ backToSearchWrap, label, content, loading ]);

  this.resourceTree = element;
  this.resourceTreeContent = content;
  this.resourceTreeLoading = loading;
  this.rootElement.appendChild(this.resourceTree);
}


// ArchivesspaceBrowser.prototype.getFromAspaceApi = function(path, params, callback) {
//   var url = this.apiRootPath + '/api_get';
//   var getParams = params || {};
//   getParams['path'] = path;
//   this.getUrlWithParams(url, getParams, callback);
// }


ArchivesspaceBrowser.prototype.getArchivalObjectRecord = function(uri) {
  console.log(uri);

  var _this = this;
  var url = this.apiRootPath + uri;
  url = url.replace(/\/{2}/,'/');

  this.getUrl(url, function(data) {
    _this.updateRecordPane(data);

    if (_this.callback) {
      _this.callback(data);
    }
  });
}


ArchivesspaceBrowser.prototype.updateRecordPane = function(data) {
  console.log(data);

  data = JSON.parse(data);
  var recordPane = document.querySelector('#record-pane');
  // remove old content
  recordPane.innerHTML = '';
  this.show(recordPane);
  var content = this.generateElement('div', 'record-pane-content');
  var label = this.htmlToElement('<div class="heading">Selected record:</div>');
  content.appendChild(label);
  var branches = document.querySelectorAll('#resource-tree-level-content .tree-level-branch');
  var leafIndex = branches.length;
  for (var i = 0; i < branches.length; i++) {
    var branch = branches[i];
    var levelClass = 'level-' + i;
    var e = this.generateElement('div', [levelClass, 'tree-level-branch']);
    e.innerText = branch.innerText;
    content.appendChild(e);
  }
  var leafLevelClass = 'level-' + leafIndex;
  var leaf = this.generateElement('div', [leafLevelClass, 'tree-level-leaf']);
  
  // if (data['display_string'] && !(data['display_string'] !== undefined)) {
  //   leaf.innerText = data['display_string'];
  // }
  // else {
  //   leaf.innerText = data['title']
  // }

  leaf.innerText = data['display_string'] || data['title'];

  console.log(data['display_string']);

  if (data['jsonmodel_type'] != 'archival_object') {
    leaf.innerText = leaf.innerText + ' (' + data['jsonmodel_type'] + ')';
  }
  content.appendChild(leaf);
  recordPane.appendChild(content);
}


// Search

ArchivesspaceBrowser.prototype.performResourceSearch = function(q) {
  var _this = this;
  q = q.replace(/[\.\/\\\?\&]/,' ');
  var url = this.apiRootPath + '/resource_search/' + q;

  this.clearResourceSearchResults();

  if (q.length >= 3) {
    this.show(this.resourceSearchResults);
    this.show(this.resourceSearchLoading);

    this.getUrl(url, function(results) {
      _this.hide(_this.resourceSearchLoading);
      var results = JSON.parse(results);
      _this.updateSearchResults(results);
    });
  }
}


ArchivesspaceBrowser.prototype.clearResourceSearchResults = function() {
  var _this = this;
  var oldResults = this.resourceSearchResults.querySelectorAll('.results');
  if (oldResults.length > 0) {
    oldResults.forEach(function(r) {
      _this.resourceSearchResults.removeChild(r);
    });
  }
}


ArchivesspaceBrowser.prototype.updateSearchResults = function(results) {
  this.clearResourceSearchResults();
  this.show(this.resourceSearchResults);
  var content;
  if (results.length == 0) {
    content = this.generateElement('div', ['results', 'no-results']);
    content.innerHTML = "No results";
  }
  else {
    content = this.searchResultsList(results);
  }

  this.resourceSearchResults.appendChild(content);
}


ArchivesspaceBrowser.prototype.searchResultsList = function(results) {
  var _this = this;
  var list = this.generateElement('ul', 'results');
  results.forEach(function(r) {
    var item = _this.generateElement('li');
    var link = _this.generateElement('span', 'link');
    link.setAttribute('data-uri', r.uri);
    link.innerHTML = r['title'];
    link.addEventListener('click', function(e) {
      _this.hide(_this.resourceSearch);
      _this.show(_this.resourceTree);
      var uri = this.getAttribute('data-uri');
      _this.loadResourceTree(uri);
    });
    item.appendChild(link);
    list.appendChild(item);
  });
  return list;
}


/* Resource tree */

ArchivesspaceBrowser.prototype.leafInnerHTML = function(data) {
  var html;
  var title = data['title'];

  function addDates() {
    if (data['dates'] && Array.isArray(data['dates']) && data['dates'][0]) {
      var date = data['dates'][0];
      var dateText;

      if (date['expression']) {
        dateText = date['expression'];
      }
      else if (date['begin'] || date['end']) {
        dateText = date['begin'] || '';
        dateText = dateText + '-'
        dateText = dateText + (date['end'] || '')
      }

      if (dateText) {
        title = title + ', ' + dateText;
      }
    }
  }

  function containerText(container) {
    var text;

    if (container['top_container_type']) {
      text = container['top_container_type'] + ' ' + container['top_container_indicator'];
    }
    if (container['type_2']) {
      text = text + ', ' + container['type_2'] + ' ' + container['indicator_2'];
    }
    return text;
  }

  function addContainers() {
    var text;

    if (data['containers'] && Array.isArray(data['containers'])) {
      var containers = [];
      data['containers'].forEach(function(c) {
        var cText = containerText(c);
        if (cText && cText.length > 0) {
          containers.push(containerText(c));
        }
      });
      if (containers.length > 0) {
        text = containers.join('; ');
      }
    }

    if (text) {
      html = html + '<br><span class="container">' + text + '</span>';
    }
  }

  addDates();
  html = '<span class="title">' + title + '</span>';
  addContainers();
  return html;
}


ArchivesspaceBrowser.prototype.leafHasContainers = function(data) {
  var hasContainers = false;
  if (data['containers'] && Array.isArray(data['containers'])) {
    for (var i = 0; i < data['containers'].length; i++) {
      var c = data['containers'][i];
      if (c['top_container_type']) {
        hasContainers = true;
        break;
      }
    }
  }
  return hasContainers;
}


ArchivesspaceBrowser.prototype.leafIsFile = function(data) {
  return data['level'] == 'file';
}


ArchivesspaceBrowser.prototype.generateLeafElement = function(data, level) {

  console.log(data);

  var _this = this;
  var levelClass = 'level-' + level;
  var leaf = this.generateElement('div', [levelClass, 'tree-level', 'tree-level-leaf']);
  var html = this.leafInnerHTML(data);

  if (data['child_count'] > 0) {
    var leafLink = this.generateElement('span', 'link');
    leafLink.innerHTML = html;

    leafLink.addEventListener('click', function(e) {
      _this.getResourceTreeLevel(data['uri']);
    });

    leaf.appendChild(leafLink);
  }
  else {
    leaf.innerHTML = html;
    if (this.leafHasContainers(data) || this.leafIsFile(data)) {
      var select = this.generateElement('span', 'select-record');
      var selectLink = this.generateElement('span', 'link');
      selectLink.setAttribute('data-uri', data['uri']);
      selectLink.innerHTML = 'Select';

      selectLink.addEventListener('click', function(e) {
        _this.getArchivalObjectRecord(data['uri']);
      });

      select.appendChild(selectLink);
      leaf.appendChild(select);
    }
  }

  return leaf;
}


ArchivesspaceBrowser.prototype.updateActiveResourceTreePath = function(parentUri) {
  var index = this.activeResourceTreePath.indexOf(parentUri);
  if (index > 0) {
    this.activeResourceTreePath.splice(index, this.activeResourceTreePath.length);
  }
  else if (index < 0) {
    this.activeResourceTreePath.push(parentUri);
  }
  else if (index == 0) {
    this.activeResourceTreePath = [parentUri];
  }
}


ArchivesspaceBrowser.prototype.clearResourceTreeContent = function() {
  this.resourceTreeContent.innerHTML = '';
}


// ArchivesspaceBrowser.prototype.getTreeRootData = function(callback) {
//   var _this = this;
//   var path = this.resourceUri + '/tree/root';
//   this.getFromAspaceApi(path, null, callback);
// }


ArchivesspaceBrowser.prototype.getTreeRootData = function(callback) {
  var _this = this;
  var params = { root_uri: this.resourceUri };
  var url = this.apiRootPath + '/tree_root_data';
  this.getUrlWithParams(url, params, callback);
}


ArchivesspaceBrowser.prototype.getTreeNodeData = function(archivalObjectUri, callback) {
  var _this = this;
  var params = { root_uri: this.resourceUri, node_uri: archivalObjectUri };
  var url = this.apiRootPath + '/tree_node_data';
  this.getUrlWithParams(url, params, callback);
}


ArchivesspaceBrowser.prototype.loadResourceTree = function(resourceUri) {
  var _this = this;
  this.resourceUri = resourceUri;
  this.activeResourceTreePath = [resourceUri];
  this.resourceTreeMap = {};
  this.getResourceTreeLevel();
}


ArchivesspaceBrowser.prototype.resourceTreeUpdateInProgress = function() {
  var branches = document.querySelector('#resource-tree-level-content .tree-leaves');
  if (branches) {
    this.hide(branches);
  }
  this.show(this.resourceTreeLoading);
}


ArchivesspaceBrowser.prototype.resourceTreeUpdateComplete = function() {
  var branches = document.querySelector('#resource-tree-level-content .tree-leaves');
  this.hide(this.resourceTreeLoading);
  if (branches) {
    this.show(branches);
  }
}


ArchivesspaceBrowser.prototype.getResourceTreeLevel = function(parentUri) {
  var _this = this;
  var params = parentUri ? { parent_uri: parentUri } : {};
  var target = parentUri ? 'node' : 'root';
  parentUri = parentUri || this.resourceUri;
  var treeLevelData;

  // If tree level has already been loaded show loaded content
  if (this.resourceTreeMap[parentUri]) {
    treeLevelData = this.resourceTreeMap[parentUri];
    this.updateResourceTree(treeLevelData, parentUri);
  }
  // If tree level has not been loaded then go get it
  else {
    this.resourceTreeUpdateInProgress();

    var callback = function(response) {
      var treeLevelData = JSON.parse(response);
      _this.resourceTreeMap[parentUri] = treeLevelData;
      _this.updateResourceTree(treeLevelData, parentUri);
      _this.resourceTreeUpdateComplete();
    }

    if (target == 'root') {
      this.getTreeRootData(callback);
    }
    else {
      this.getTreeNodeData(parentUri, callback);
    }
  }
}


ArchivesspaceBrowser.prototype.setTreeParams = function(treeLevelData, parentUri) {
  var parent = (!parentUri || parentUri == this.resourceUri) ? '' : parentUri;
  var newContent = this.generateElement('div');
  newContent.setAttribute('id','resource-tree-level-content');

  if (!treeLevelData.children && treeLevelData['precomputed_waypoints'] && treeLevelData['precomputed_waypoints'][parent]) {
    treeLevelData.children = treeLevelData['precomputed_waypoints'][parent][0];
  }
  else if (!treeLevelData.children) {
    treeLevelData.children = [];
  }

  var params = {
    waypointsParent: parent,
    parentUri: parentUri || this.resourceUri,
    children: treeLevelData.children,
    newContent: newContent,
    treeHead: this.generateElement('div', 'tree-branches'),
    treeLeaves: this.generateElement('div', 'tree-leaves'),
    oldContent: this.resourceTreeContent.querySelector('#resource-tree-level-content')
  }

  return params;
}


ArchivesspaceBrowser.prototype.updateResourceTree = function(treeLevelData, parentUri) {
  var _this = this;
  var treeLeavesData;
  var treeLevel;
  treeParams = this.setTreeParams(treeLevelData, parentUri);
  treeLevelData['children'] = treeParams.children;
  this.resourceTreeMap[parentUri] = treeLevelData;

  if (parentUri) {
    this.updateActiveResourceTreePath(parentUri);
  }

  // Iterate through this.activeResourceTreePath to build heading and determine level
  for (var i = 0; i < this.activeResourceTreePath.length; i++) {
    var isCurrentLevel = (i == this.activeResourceTreePath.length - 1);
    var uri = this.activeResourceTreePath[i];
    var data = this.resourceTreeMap[uri];
    var levelClass = 'level-' + i;
    var heading = this.generateElement('div', [levelClass, 'tree-level', 'tree-level-branch']);

    if (!isCurrentLevel) {
      var levelLink = this.generateElement('span', 'link');
      levelLink.innerHTML = data['title'];
      levelLink.addEventListener('click', function(e) {
        _this.getResourceTreeLevel(uri);
      });
      heading.appendChild(levelLink);
    }
    else {
      heading.innerHTML = data['title'];
    }

    treeParams.treeHead.appendChild(heading);

    if (isCurrentLevel) {
      treeLevel = i + 1;
      treeLeavesData = data['children'];
    }
  }

  treeParams.newContent.appendChild(treeParams.treeHead);
  treeParams.newContent.appendChild(treeParams.treeLeaves);
  this.addLeaves(treeParams.treeLeaves, treeLeavesData, treeLevel);

  if (treeParams.oldContent) {
    this.resourceTreeContent.replaceChild(treeParams.newContent, treeParams.oldContent);
  }
  else {
    this.resourceTreeContent.appendChild(treeParams.newContent);
  }
}


ArchivesspaceBrowser.prototype.addLeaves = function(leavesWrapper, leavesData, level) {
  var _this = this;

  if (leavesData.length == 0) {
    var leaf = this.generateElement('div', ['level-1', 'tree-level', 'tree-level-leaf', 'tree-level-no-children']);
    leaf.innerHTML = "This resource contains no children"
    leavesWrapper.appendChild(leaf);
  }
  else {
    leavesData.forEach(function(data) {
      var leaf = _this.generateLeafElement(data, level);
      leavesWrapper.appendChild(leaf);
    });
  }
}
